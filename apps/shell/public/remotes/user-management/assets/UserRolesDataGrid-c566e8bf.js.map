{"version":3,"file":"UserRolesDataGrid-c566e8bf.js","sources":["../../../../../user-management/src/pages/UsersManagement/components/UserRolesDataGrid/userRolesDataGrid.config.ts","../../../../../user-management/src/pages/UsersManagement/components/UserRolesDataGrid/UserRolesDataGrid.vue"],"sourcesContent":["import { GetRolesOfUserQueryDTOCoreListResponse, GetRolesOfUserQueryDTOCoreListResponseFields } from '../../../../users';\r\nimport { DataGridConfig } from 'shared-components'\r\n\r\nimport { userEntity } from '../../userManagement.entities';\r\nimport { USER_ROLES_DATA_GRID } from '../../componentIds';\r\nimport { loadRemoteModule, settingsService, VisualizationType } from 'utility';\r\n\r\nlet module = settingsService.activeModules.value.find(m => m.moduleName ==  \"rolesManagement\");\r\nif (!module) {\r\n  throw new Error(\"Module is undefined or null\");\r\n}\r\nlet selectionFromDS = await loadRemoteModule({\r\n  remoteUrl: module.pathToModule!, \r\n  remoteName: module.moduleName!, \r\n  exposedModule: \"./rolesSelectionFromDataSource\"});\r\nexport const rolesByUserGridConfig: DataGridConfig<GetRolesOfUserQueryDTOCoreListResponse> = {\r\n  id: USER_ROLES_DATA_GRID,\r\n  title: \"s:userRoles\",\r\n  newFormTitle: \"s:assignRoleToUser\",\r\n  entity: userEntity.subEntities.userRoles,\r\n  columns: [\r\n    {\r\n      field: GetRolesOfUserQueryDTOCoreListResponseFields.id,\r\n      visible: false,\r\n      visualizationType: VisualizationType.Value11,\r\n      addedInEditMode: true,\r\n      visibleInEditMode: false\r\n    },\r\n    {\r\n      field: { _field: \"roleId\", _caption: \"s:role\", _type: \"number\"},\r\n      visible: false,\r\n      visualizationType: VisualizationType.Value3,\r\n      addedInEditMode: true,\r\n      visibleInEditMode: true,\r\n      selectionFromDataSource: selectionFromDS.selectionFromDataSource\r\n    },\r\n    {\r\n      field: GetRolesOfUserQueryDTOCoreListResponseFields.name,\r\n      visible: true,\r\n      visualizationType: VisualizationType.Value11,\r\n      addedInEditMode: false,\r\n      visibleInEditMode: false\r\n    },\r\n    {\r\n      field: GetRolesOfUserQueryDTOCoreListResponseFields.defaultPage,\r\n      visible: true,\r\n      visualizationType: VisualizationType.Value11,\r\n      addedInEditMode: false,\r\n      visibleInEditMode: false\r\n    }\r\n  ]\r\n};","<template>\r\n    <DataGrid\r\n      ref=\"rolesGridRef\"\r\n      :config=\"rolesByUserGridConfig\"\r\n      :can-delete=\"false\"\r\n      :can-update=\"false\"\r\n      :additional-extra-params-request-params=\"getAdditionalActionsParams\"\r\n      @refresh=\"onRefresh\"\r\n      @view-changed=\"onViewChanged\"     \r\n    />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { DataGrid, DataGridStore } from 'shared-components';\r\nimport { useUserManagementStore } from '../../userManagement.store';\r\nimport { USER_ROLES_DATA_GRID } from '../../componentIds';\r\nimport { rolesByUserGridConfig } from './userRolesDataGrid.config'\r\nimport { ref } from 'vue';\r\n\r\n\r\nconst pageStore = useUserManagementStore();\r\n\r\nconst rolesGridRef = ref<typeof DataGrid | null>(null);\r\n\r\npageStore.onRefresh(USER_ROLES_DATA_GRID, () => {\r\n    rolesGridRef.value?.refresh();\r\n});\r\n\r\nfunction onViewChanged(newState: DataGridStore) {\r\n  pageStore.userRolesDataGridStore.SaveDataGridView(newState);\r\n}\r\n\r\nfunction onRefresh() {\r\n    pageStore.triggerRefresh(USER_ROLES_DATA_GRID);\r\n}\r\n\r\nfunction getAdditionalActionsParams(): Map<string, any> {\r\n  return new Map<string, any>([\r\n    ['userId', pageStore.usersDataGridStore.GetDataGridView()?.selectedRowKeys?.[0] ?? null]\r\n  ]);\r\n}\r\n</script>"],"names":["settingsService","loadRemoteModule","VisualizationType"],"mappings":";;;;;;;;;AAOA,IAAI,MAAA,GAASA,sEAAgB,aAAc,CAAA,KAAA,CAAM,KAAK,CAAK,CAAA,KAAA,CAAA,CAAE,cAAe,iBAAiB,CAAA,CAAA;AAC7F,IAAI,CAAC,MAAQ,EAAA;AACX,EAAM,MAAA,IAAI,MAAM,6BAA6B,CAAA,CAAA;AAC/C,CAAA;AACA,IAAI,eAAA,GAAkB,MAAMC,sEAAiB,CAAA;AAAA,EAC3C,WAAW,MAAO,CAAA,YAAA;AAAA,EAClB,YAAY,MAAO,CAAA,UAAA;AAAA,EACnB,aAAe,EAAA,gCAAA;AAAgC,CAAC,CAAA,CAAA;AAC3C,MAAM,qBAAgF,GAAA;AAAA,EAC3F,EAAI,EAAA,oBAAA;AAAA,EACJ,KAAO,EAAA,aAAA;AAAA,EACP,YAAc,EAAA,oBAAA;AAAA,EACd,MAAA,EAAQ,WAAW,WAAY,CAAA,SAAA;AAAA,EAC/B,OAAS,EAAA;AAAA,IACP;AAAA,MACE,OAAO,4CAA6C,CAAA,EAAA;AAAA,MACpD,OAAS,EAAA,KAAA;AAAA,MACT,mBAAmBC,uEAAkB,CAAA,OAAA;AAAA,MACrC,eAAiB,EAAA,IAAA;AAAA,MACjB,iBAAmB,EAAA,KAAA;AAAA,KACrB;AAAA,IACA;AAAA,MACE,OAAO,EAAE,MAAA,EAAQ,UAAU,QAAU,EAAA,QAAA,EAAU,OAAO,QAAQ,EAAA;AAAA,MAC9D,OAAS,EAAA,KAAA;AAAA,MACT,mBAAmBA,uEAAkB,CAAA,MAAA;AAAA,MACrC,eAAiB,EAAA,IAAA;AAAA,MACjB,iBAAmB,EAAA,IAAA;AAAA,MACnB,yBAAyB,eAAgB,CAAA,uBAAA;AAAA,KAC3C;AAAA,IACA;AAAA,MACE,OAAO,4CAA6C,CAAA,IAAA;AAAA,MACpD,OAAS,EAAA,IAAA;AAAA,MACT,mBAAmBA,uEAAkB,CAAA,OAAA;AAAA,MACrC,eAAiB,EAAA,KAAA;AAAA,MACjB,iBAAmB,EAAA,KAAA;AAAA,KACrB;AAAA,IACA;AAAA,MACE,OAAO,4CAA6C,CAAA,WAAA;AAAA,MACpD,OAAS,EAAA,IAAA;AAAA,MACT,mBAAmBA,uEAAkB,CAAA,OAAA;AAAA,MACrC,eAAiB,EAAA,KAAA;AAAA,MACjB,iBAAmB,EAAA,KAAA;AAAA,KACrB;AAAA,GACF;AACF,CAAA;;;;;AC/BA,IAAA,MAAM,YAAY,sBAAuB,EAAA,CAAA;AAEzC,IAAM,MAAA,YAAA,GAAe,IAA4B,IAAI,CAAA,CAAA;AAErD,IAAU,SAAA,CAAA,SAAA,CAAU,sBAAsB,MAAM;AAC5C,MAAA,YAAA,CAAa,OAAO,OAAQ,EAAA,CAAA;AAAA,KAC/B,CAAA,CAAA;AAED,IAAA,SAAS,cAAc,QAAyB,EAAA;AAC9C,MAAU,SAAA,CAAA,sBAAA,CAAuB,iBAAiB,QAAQ,CAAA,CAAA;AAAA,KAC5D;AAEA,IAAA,SAAS,SAAY,GAAA;AACjB,MAAA,SAAA,CAAU,eAAe,oBAAoB,CAAA,CAAA;AAAA,KACjD;AAEA,IAAA,SAAS,0BAA+C,GAAA;AACtD,MAAA,2BAAW,GAAiB,CAAA;AAAA,QAC1B,CAAC,UAAU,SAAU,CAAA,kBAAA,CAAmB,iBAAmB,EAAA,eAAA,GAAkB,CAAC,CAAA,IAAK,IAAI,CAAA;AAAA,OACxF,CAAA,CAAA;AAAA,KACH;;;;;;;;;;;;;;;;;;"}