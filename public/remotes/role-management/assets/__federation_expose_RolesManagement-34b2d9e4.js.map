{"version":3,"mappings":";;;;AAKA;AAA2F;AAEpF,MAAM,eAAoE;AAAA,CAC/E,GAAI;AAAA,CACJ,MAAO;AAAA,CACP,aAAc;AAAA,CACd,OAAQ;AAAA,EACR,OAAS;AAAA,CACP;AAAA,MACE,OAAO,sCAAuC;AAAA,CAC9C,YAAS;AAAA,CACT,oBAAiB;AAAA,CACjB,sBAAmB;AAAA,MACnB,mBAAmB,iBAAkB;AAAA,CACvC;AAAA,CACA;AAAA,MACE,OAAO,sCAAuC;AAAA,CAC9C,YAAS;AAAA,CACT,oBAAiB;AAAA,MACjB,mBAAmB,iBAAkB;AAAA,CACvC;AAAA,CACA;AAAA,MACE,OAAO,sCAAuC;AAAA,CAC9C,YAAS;AAAA,CACT,oBAAiB;AAAA,MACjB,mBAAmB,iBAAkB;AAAA,CACvC;AAAA,CACA;AAAA,MACE,OAAO,CAAE,SAAQ,iBAAiB,QAAU,mBAAiB,OAAO,QAAQ;AAAA,CAC5E,YAAS;AAAA,CACT,oBAAiB;AAAA,MACjB,mBAAmB,iBAAkB;AAAA,MACrC,uBAAyB;AAAA,CACvB,iBAAY;AAAA,QACZ,oBAAoB,sCAAuC;AAAA,QAC3D,cAAc,sCAAuC;AAAA,CACvD;AAAA,CACF;AAAA,CACF;AACF;;;;;;AC9BA;AAIA;AAAoB;;;;AAGpB,SAAM,WAAY,yBAAwB;AAC1C,SAAM,aAAc,KAAI;AAExB,aAAS,SAAY;AACnB,gBAAU,eAAe,eAAe;AAAA,CAC1C;AAEA,YAAS,aAAY,IAAW;AAC9B,CAAM,cAAK,QAAM,EAAM;AACvB,CAAI,cAAO,WAAU,oBAAmB,eAAgB;AACxD,MAAK,uBAAkB,CAAC,EAAE;AAC1B,CAAU,kCAAmB,iBAAiB,IAAI;AAClD,CAAU;AAAA,CACZ;AAEA,YAAS,eAAc,QAAyB;AAC9C,CAAU,kCAAmB,iBAAiB,QAAQ;AAAA,CACxD;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;;;;AAKA,UAAM,uBAA0B;AAAA,MAAqB,CACnD,gCAAO,CAAkE;AAAA,KAC3E;AAGA,UAAM,6BAAgC;AAAA,MAAqB,CACzD,gCAAO,CAA8E;AAAA,KACvF;AAEA,SAAM,WAAY,yBAAwB","names":[],"sources":["../../src/pages/RolesManagement/components/RolesDataGrid/rolesDataGrid.config.ts","../../src/pages/RolesManagement/components/RolesDataGrid/RolesDataGrid.vue","../../src/pages/RolesManagement/RolesManagement.vue"],"sourcesContent":["import { GetRolesQueryDTOCoreListResponse, GetRolesQueryDTOCoreListResponseFields } from '../../../../roles';\r\nimport { DataGridConfig } from 'shared-components'\r\n\r\nimport { rolesEntity } from '../../rolesManagement.entities';\r\nimport { ROLES_DATA_GRID } from '../../componentIds';\r\nimport { GetPagesQueryDTOCoreListResponseFields, pagesDataSource, VisualizationType } from 'utility';\r\n\r\nexport const rolesGridConfig: DataGridConfig<GetRolesQueryDTOCoreListResponse> = {\r\n  id: ROLES_DATA_GRID,\r\n  title: \"s:roles\",\r\n  newFormTitle: \"s:newRole\",\r\n  entity: rolesEntity,\r\n  columns: [\r\n    { \r\n      field: GetRolesQueryDTOCoreListResponseFields.id, \r\n      visible: false,\r\n      addedInEditMode: true,\r\n      visibleInEditMode: false,\r\n      visualizationType: VisualizationType.Value11\r\n    },\r\n    { \r\n      field: GetRolesQueryDTOCoreListResponseFields.name,\r\n      visible: true,\r\n      addedInEditMode: true,\r\n      visualizationType: VisualizationType.Value11\r\n    },\r\n    { \r\n      field: GetRolesQueryDTOCoreListResponseFields.defaultPage,\r\n      visible: true,\r\n      addedInEditMode: false,\r\n      visualizationType: VisualizationType.Value11\r\n    },\r\n    { \r\n      field: { _field: \"defaultPageId\", _caption: \"s:defaultPage\", _type: \"number\"},\r\n      visible: false,\r\n      addedInEditMode: true,\r\n      visualizationType: VisualizationType.Value3,\r\n      selectionFromDataSource: {\r\n        dataSource: pagesDataSource,\r\n        displayDataMemeber: GetPagesQueryDTOCoreListResponseFields.name,\r\n        idDataMember: GetPagesQueryDTOCoreListResponseFields.id\r\n      }\r\n    },\r\n  ]\r\n};","<template>\r\n  <DataGrid\r\n    ref=\"dataGridRef\"\r\n    :config=\"rolesGridConfig\"\r\n    :can-delete=\"false\"\r\n    :can-update=\"false\"\r\n    @refresh=\"onRefresh\"\r\n    @selected=\"onSelection\"\r\n    @view-changed=\"onViewChanged\"\r\n  />\r\n\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { DataGrid, DataGridStore } from 'shared-components';\r\nimport { useRolesManagementStore } from '../../rolesManagement.store';\r\nimport { ROLES_DATA_GRID } from '../../componentIds';\r\nimport { rolesGridConfig } from './rolesDataGrid.config'\r\nimport { ref } from 'vue';\r\nimport { DxButton } from '@metronik/devextreme';\r\n\r\nconst pageStore = useRolesManagementStore();\r\nconst dataGridRef = ref();\r\n\r\nfunction onRefresh() {\r\n  pageStore.triggerRefresh(ROLES_DATA_GRID);\r\n}\r\n\r\nfunction onSelection(user: any) {\r\n  const id = user?.id ?? null;\r\n  let view = pageStore.rolesDataGridStore.GetDataGridView();\r\n  view.selectedRowKeys = [id];\r\n  pageStore.rolesDataGridStore.SaveDataGridView(view);\r\n  onRefresh();\r\n}\r\n\r\nfunction onViewChanged(newState: DataGridStore) {\r\n  pageStore.rolesDataGridStore.SaveDataGridView(newState);\r\n}\r\n</script>\r\n","<template>\n  <div class=\"container-fluid\">\n    <RolesDataGrid />\n\n    <div v-if=\"pageStore.rolesDataGridStore.GetDataGridView()?.selectedRowKeys?.length\" class=\"row mt-4\">\n      <div class=\"col-md-6\">\n        <PagePermissionsDataGrid />\n      </div>\n      <div class=\"col-md-6\">\n        <DataSourcePermissionsDataGrid />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { defineAsyncComponent } from 'vue';\nimport RolesDataGrid from './components/RolesDataGrid/RolesDataGrid.vue';\nimport { useRolesManagementStore } from './rolesManagement.store';\n\n\nconst PagePermissionsDataGrid = defineAsyncComponent(() => \n  import('./components/PagePermissionsDataGrid/PagePermissionsDataGrid.vue')\n)\n\n\nconst DataSourcePermissionsDataGrid = defineAsyncComponent(() => \n  import('./components/DataSourcePermissionsDataGrid/DataSourcePermissionsDataGrid.vue')\n)\n\nconst pageStore = useRolesManagementStore();\n</script>\n"],"file":"assets/__federation_expose_RolesManagement-34b2d9e4.js"}